install.packages("greta")
library("greta", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install_tensorflow()
install_tensorflow()
(z <- ones(3, 3))
n <- 10 # rv parameters
p <- 0.7
(z2 <- z + z ^ 2)
install.packages("fst")
??fst
install.packages("repurrrsive")
?repurrrsive
library(repurrrsive)
?repurrrsive
library(tidyverse)
data_frame(t = seq(-pi, 0, .001),
x1 = 16 * (sin(t)) ^ 2,
x2 = -x1,
y = 13 * cos(t) - 5 * cos (2 * t)) - 2 * cos (3 * t) - cos(4*2)) %>%
gather(side, x, x1, x2) %>%
ggplot(aes(x,y)) +
geom_polygon(fill-"red") +
coord_fixed() +
theme_minimal()
side <- data_frame(t = seq(-pi, 0, .001),
x1 = 16 * (sin(t)) ^ 2,
x2 = -x1,
y = 13 * cos(t) - 5 * cos (2 * t)) - 2 * cos (3 * t) - cos(4*2)) %>%
gather(side, x, x1, x2) %>%
ggplot(aes(x,y)) +
geom_polygon(fill-"red") +
coord_fixed() +
theme_minimal()
side <- data_frame(t = seq(-pi, 0, .001),
x1 = 16 * (sin(t)) ^ 2,
x2 = -x1,
y = 13 * cos(t) - 5 * cos (2 * t)) - 2 * cos (3 * t) - cos(4*2))
side <- data_frame(t = seq(-pi, 0, .001),
x1 = 16 * (sin(t)) ^ 2,
x2 = -x1,
y = 13 * cos(t) - 5 * cos (2 * t)) - 2 * cos (3 * t) - cos(4*2)
side <- data_frame(t = seq(-pi, 0, .001),
x1 = 16 * (sin(t)) ^ 2,
x2 = -x1,
y = 13 * cos(t) - 5 * cos (2 * t)) - 2 * cos (3 * t) - cos(4 * t)))
side <- data_frame(t = seq(-pi, 0, .001),
x1 = 16 * (sin(t)) ^ 2,
x2 = -x1,
y = 13 * cos(t) - 5 * cos (2 * t)) - 2 * cos (3 * t) - cos(4 * t))
side <- data_frame(t = seq(-pi, 0, .001),
x1 = 16 * (sin(t)) ^ 2,
x2 = -x1,
y = 13 * cos(t) - 5 * cos (2 * t)) - 2 * cos (3 * t) - cos(4 * t)
install.packages("choroplethr")
update.packages()
z
z2
rmz
rm(z,z2)
n
p
contributors()
dir()
dir (repos)
dir("repos")
dir("repos/geotest")
dir("repos/geometries")
install.packages(c("broom", "callr", "caTools", "circlize", "dbplyr", "devtools", "digest", "dplyr", "e1071", "evaluate", "fastcluster", "foreign", "fs", "ggthemes", "git2r", "GlobalOptions", "glue", "gmodels", "gtools", "haven", "highr", "httpuv", "infer", "ISOcodes", "iterators", "janitor", "maptools", "mapview", "modelr", "munsell", "naniar", "openssl", "packrat", "pdftools", "pillar", "pkgconfig", "pkgdown", "processx", "protolite", "psych", "purrr", "purrrlyr", "Rcpp", "RcppArmadillo", "RCurl", "reprex", "reticulate", "rgdal", "rjson", "rlang", "rmarkdown", "roxygen2", "scales", "snakecase", "spData", "spdep", "stringdist", "stringi", "stringr", "survival", "tesseract", "tidyr", "tidytext", "tm", "tmap", "tmaptools", "units", "urltools", "utf8", "visdat", "XML", "yaml"))
install.packages("rCharts")
install.packages("rcharts")
library(devtools)
library(Rcpp)
install_github('ramnathv/rCharts')
library(rCharts)
help(rCharts)
??rCharts
a <- rCharts::Highcharts$new()
a$series(data = list(
list(y = 8, url = "https://github.com/metagraf/rHighcharts", color = "lightblue"),
list(y = 14, url = "https://github.com/metagraf/rVega", color = "lightpink"),
list(y = 71, url = "https://github.com/ramnathv/rCharts", color = "lightgreen")
), type = "column", name = "Number of Stars")
a$plotOptions(column = list(cursor = 'pointer', point = list(events = list(click = "#! function() { location.href = this.options.url; } !#"))))
a$xAxis(categories = c("rHighcharts", "rVega", "rCharts"), title = list(text = ""))
a$yAxis(title = list(text = ""))
a$legend(enabled = F)
a
..p. <- function() invisible(readline("\nPress <return> to continue: "))
library(rCharts)
# Example 1
hPlot(Pulse ~ Height, data = MASS::survey, type = "scatter", group = "Exer")
..p.() # ================================
## Example 2
a <- hPlot(Pulse ~ Height, data = MASS::survey, type = "bubble", title = "Zoom demo", subtitle = "bubble chart", size = "Age", group = "Exer")
a$chart(zoomType = "xy")
a$exporting(enabled = T)
a
..p.() # ================================
## Example 4
x <- data.frame(key = c("a", "b", "c"), value = c(1, 2, 3))
hPlot(x = "key", y = "value", data = x, type = "pie")
..p.() # ================================
## Example 5
a <- hPlot(Pulse ~ Height, data = MASS::survey, type = 'scatter', group = 'Sex', radius = 6, group.na = "Not Available")
a$colors('rgba(223, 83, 83, .5)', 'rgba(119, 152, 191, .5)', 'rgba(60, 179, 113, .5)')
a$legend(align = 'right', verticalAlign = 'top', layout = 'vertical')
a$plotOptions(scatter = list(marker = list(symbol = 'circle')))
a$tooltip(formatter = "#! function() { return this.x + ', ' + this.y; } !#")
a
..p.() # ================================
## Example 6
hPlot(freq ~ Exer, data = plyr::count(MASS::survey, c('Sex', 'Exer')), type = c('column', 'line'), group = 'Sex', radius = 6)
..p.() # ================================
## Example 7
hPlot(freq ~ Exer, data = plyr::count(MASS::survey, c('Sex', 'Exer')), type = 'bar', group = 'Sex', group.na = 'NA\'s')
..p.() # ================================
## Example 8
a <- hPlot(freq ~ Exer, data = plyr::count(MASS::survey, c('Sex', 'Exer')), type = 'column', group = 'Sex', group.na = 'NA\'s')
a$plotOptions(column = list(dataLabels = list(enabled = T, rotation = -90, align = 'right', color = '#FFFFFF', x = 4, y = 10, style = list(fontSize = '13px', fontFamily = 'Verdana, sans-serif'))))
a$xAxis(labels = list(rotation = -45, align = 'right', style = list(fontSize = '13px', fontFamily = 'Verdana, sans-serif')), replace = F)
a
..p.() # ================================
## Example 9 (not working properly)
drill_function <- "#! function() {
var drilldown = this.drilldown;
function setChart(name, categories, data, color) {
chart.xAxis[0].setCategories(categories, false);
chart.series[0].remove(false);
chart.addSeries({
name: name,
data: data,
color: color || 'black'
}, false);
chart.redraw();
};
if (drilldown) { // drill down
setChart(drilldown.name, drilldown.categories, drilldown.data, drilldown.color);
} else { // restore
setChart(name, categories, data);
}
} !#"
a <- rCharts::Highcharts$new()
a$chart(type = "column")
a$series(data = list(
list(y = 15, drilldown = list(data = c(1, 2, 3))),
list(y = 20, drilldown = list(data = c(1, 2, 3)))), name = "test")
a$xAxis(categories = c("Brand A", "Brand B"))
a$plotOptions(column = list(cursor = 'pointer', point = list(events = list(click = drill_function))))
a
..p.() # ================================
## Example 10
a <- hPlot(freq ~ Exer, data = plyr::count(MASS::survey, c('Sex', 'Exer')), type = 'bar', group = 'Sex', group.na = 'NA\'s')
a$plotOptions(bar = list(cursor = 'pointer', point = list(events = list(click = "#! function() { alert ('Category: '+ this.category +', value: '+ this.y); } !#"))))
a
..p.() # ================================
## Example 11
a <- rCharts::Highcharts$new()
a$series(data = list(
list(y = 8, url = "https://github.com/metagraf/rHighcharts", color = "lightblue"),
list(y = 14, url = "https://github.com/metagraf/rVega", color = "lightpink"),
list(y = 71, url = "https://github.com/ramnathv/rCharts", color = "lightgreen")
), type = "column", name = "Number of Stars")
a$plotOptions(column = list(cursor = 'pointer', point = list(events = list(click = "#! function() { location.href = this.options.url; } !#"))))
a$xAxis(categories = c("rHighcharts", "rVega", "rCharts"), title = list(text = ""))
a$yAxis(title = list(text = ""))
a$legend(enabled = F)
a
..p.() # ================================
map3 <- Leaflet$new()
map3$setView(c(51.505, -0.09), zoom = 13)
map3$marker(c(51.5, -0.09), bindPopup = "<p> Hi. I am a popup </p>")
map3$marker(c(51.495, -0.083), bindPopup = "<p> Hi. I am another popup </p>")
map3
install.packages("mapview")
install.packages("tidycensus")
library(mapview)
?mapview
library(htmltools)
library(reactR)
devtools::install_github("react-R/reactR")
library(reactR)
library(htmltools)
browsable(tagList(
tags$div(id = "app"),
tags$script(
"
ReactDOM.render(
React.createElement(
'h1',
null,
'Powered by React'
),
document.getElementById('app')
)
"
),
#add core-js first to work in RStudio Viewer
html_dependency_corejs(),
html_dependency_react()
))
browsable(
tagList(
tags$div(id = "app"),
tags$script(
babel_transform('ReactDOM.render(<h1>For sure Powered By React/JSX</h1>,document.getElementById("app"))')
),
# add core-js shim first for React in RStudio Viewer
html_dependency_corejs(),
html_dependency_react()
)
install.packages("bikedata")
library(bikedata)
?bikedata
library(plumber)
install.packages("plumber")
library(plumber)
?plumber
library(plumber)
r <- plumb("api/plumber.R")
r$run(port=8000)
#' Echo the parameter that was sent in
#' @param msg The message to echo back.
#' @get /echo
function(msg=""){
list(msg = paste0("The message is: '", msg, "'"))
}
#' Plot out data from the iris dataset
#' @param spec If provided, filter the data to only this species (e.g. 'setosa')
#' @get /plot
#' @png
function(spec){
myData <- iris
title <- "All Species"
# Filter if the species was specified
if (!missing(spec)){
title <- paste0("Only the '", spec, "' Species")
myData <- subset(iris, Species == spec)
}
plot(myData$Sepal.Length, myData$Petal.Length,
main=title, xlab="Sepal Length", ylab="Petal Length")
}
dir()
dir("repos")
pwd()
wd()
getwd()
setwd(~repos)
setwd("~/repos/shiny-explore-react")
getwd()
dir()
pr <- plumber::plumb("plumber.R")
pr$run()
pr <- plumber::plumb("plumber.R")
pr$run()
pr <- plumber::plumb("plumber.R")
pr$run()
pr <- plumber::plumb("plumber.R")
pr$run()
getwd()
setwd("../dockerfool1")
getwd()
dir()
dir("../")
pAPI_and_Site <- plumber::plumb("plumber.R", dir = "api); pAPI_and_Site$run(port=8001)
)
#install.packages("plumber")
#setwd("~/repos/shiny-explore-react")
library(plumber)
#install.packages("plumber")
#setwd("~/repos/shiny-explore-react")
library(plumber)
pAPI_and_Site <- plumber::plumb("plumber.R", dir = "api); pAPI_and_Site$run(port=8001)
#install.packages("plumber")
#setwd("~/repos/shiny-explore-react")
library(plumber)
pAPI_and_Site <- plumber::plumb("plumber.R", dir = "api"); pAPI_and_Site$run(port=8001)
pAPI_and_Site <- plumber::plumb(dir = "api"); pAPI_and_Site$run(port=8001)
pAPI_and_Site <- plumber::plumb("plumber.R", dir = "api"); pAPI_and_Site$run(port=8001)
pAPI_and_Site <- plumber::plumb(dir = "api"); pAPI_and_Site$run(port=8001)
